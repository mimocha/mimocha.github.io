// TODO: @use method doesn't work?
// React doesn't recognize variable usage: colors.$variable
// NOTE: @import usage is deprecated by SASS
@import "./colors.scss";
@import "./breakpoints.scss";

/* =================== Base Card Styling =================== */
.card {
	display: flex;
	flex-flow: column nowrap;
	justify-content: safe center;
	overflow: hidden;

	min-height: 400px;

	border-radius: 16px;
	box-shadow: -2px 2px 6px $shadow-secondary-1-3,
				4px -4px 4px #ffffff;
}

.card-link {
	display: inherit;
	flex-flow: inherit;
	// fills card
	min-width: 100%;
	min-height: 100%;
}

.card-image {
	background-repeat: no-repeat;
	background-size: cover;
	background-position: center;

	flex-grow: 1;
	flex-shrink: 0;
}

.card-header {
	font-size: 1.4em;
	font-weight: bold;
	color: $neutral-7;
}

.card-subheader {
	font-size: 1.05em;
	font-style: italic;
	font-weight: light;
	color: $neutral-5;
}

.card-body {
	display: flex;
	flex-flow: column nowrap;
	padding: 1em 1.5em;
	text-align: left;
	
	// Filler spacing
	// Stretches subtext to bottom of card, fills empty space
	flex-grow: 1;
	span {
		flex-grow: 1;
	}
	// Shrink required to keep content from overflowing
	flex-shrink: 1;
}

.card-text {
	font-size: 1em;
	color: $neutral-7;
}

.card-footer {
	font-size: 0.85em;
	font-style: italic;
	font-weight: light;
	color: $neutral-4;
	margin: 0;
}



/* =================== Card Image Layout =================== */
// The variable dimensions and their interactive sizes must be set with fixed
// values (px, em, etc.) Otherwise, the card contents will expand based on 
// flexbox styling, which only reallocates available space.
//
// If no extra space is available for the flexbox, no expansion effect will
// occur.
//
// If you attempt to force it with flex properties (flex-grow/shrink/basis),
// then dataloss will occur, as flex items expands beyond the available space;
// where overflow styling kicks in and hides overflowing contents.
//
// This has the cool effect of expanding the card itself, but also the
// the uncomfortable side effect of expanding the card grid on hover.
// Ideally, we would want the card to hover on-top of other cards, and expand
// to show additional content, while maintaining the original grid styling.
// This would require reworking cardbox and cards, most likely requiring fixed
// card/grid sizes, as well as responsive card/grid sizes.
//
// Idea:
// The grid itself has fixed sizes, and grid items are invisible placeholders.
// Meanwhile, the cards are overlayed on top of the placeholder, and can move
// around and expand with positioning properties. This allows for interactive
// cards, while maintaining a fixed grid. However, this will probably be a
// responsive design nightmare to figure out. Marked as future TODO.

// Regular card styling
.regular .card-image {
	height: 100px; // variable dimension
	width: 100%;
}

// Wide and Large layouts break on small screens
// Sets all cards to regular size styling then
@media only screen and (max-width: $break-sm-1) {
	.wide .card-image,
	.tall .card-image,
	.large .card-image {
		height: 100px; // variable dimension
		width: 100%;
	}
}
@media only screen and (min-width: $break-sm) {
	.wide {
		grid-column-start: span 2;
		flex-direction: row;
		.card-image {
			height: 100%;
			width: 200px; // variable dimension
		}
	}
	.tall {
		grid-row-start: span 2;
		.card-image {
			height: 350px; // variable dimension
			width: 100%;
		}
	}
	.large {
		grid-column-start: span 2;
		grid-row-start: span 2;
		.card-image {
			height: 200px; // variable dimension
			width: 100%;
		}
	}
}



/* =================== Interactivity =================== */
.interactive {
	transition: all 250ms ease-in-out,
	box-shadow 125ms ease-in-out;
	* {
		transition: all 250ms ease-in-out;
	}
}
.interactive:hover {
	// Expand and overlay effect
	// Transform uniformly rescales the contents, so everything grows by
	// the same size. Transform provides the overlapping cards effect.
	transform: scale(1.1);
	z-index: 1;

	// coloring
	background-color: lighten($primary-0, 25%);
	box-shadow: 0px 0px 12px $shadow-secondary-1-2;
	.card-header {
		color: $secondary-1-3;
	}
	.card-subheader {
		color: $secondary-1-4;
	}
}

.interactive:hover.regular .card-image {
	height: 200px;
}

// Wide and Large layouts break on small screens
// Sets all cards to regular size styling then
@media only screen and (max-width: $break-sm-1) {
	.interactive:hover.wide .card-image,
	.interactive:hover.tall .card-image,
	.interactive:hover.large .card-image {
		height: 200px;
	}
}
@media only screen and (min-width: $break-sm) {
	.interactive:hover.wide .card-image {
		width: 350px;
	}
	.interactive:hover.tall .card-image {
		height: 500px;
	}
	.interactive:hover.large .card-image {
		height: 500px;
	}
}